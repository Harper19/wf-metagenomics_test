# Include shared CI
include:
    - project: "epi2melabs/ci-templates"
      file: "wf-containers.yaml"


variables:
    # Workflow inputs given to nextflow.
    # The workflow should define `--out_dir`, the CI template sets this.
    # Only common file inputs and option values need to be given here
    # (not things such as -profile)
    NF_PROCESS_FILES: "subworkflows/kraken_pipeline.nf"
    NF_WORKFLOW_OPTS: "--fastq test_data/case01"
    NF_IGNORE_PROCESSES: "rebatchFastq"
    CI_FLAVOUR: "new"

aws-run:
    artifacts:
        when: always
        paths:
            - ${CI_PROJECT_NAME}
            - .nextflow.log
        exclude: [] # give me everything pal
    allow_failure: true


docker-run:

    # Remove this directive in downstream templates
    tags:
        - large_ram

    # Define a 1D job matrix to inject a variable named MATRIX_NAME into
    #   the CI environment, we can use the value of MATRIX_NAME to determine
    #   which options to apply as part of the rules block below
    # NOTE There is a slightly cleaner way to define this matrix to include
    #   the variables, but it is broken when using long strings! See CW-756
    parallel:
        matrix:
            - MATRIX_NAME: [
                "kraken2", "minimap2", "batch", "kraken2-watch-path", "minimap2-sample-sheet",
                "kraken2-baf", "minimap2-baf"
            ]
    rules:
     - if: ($CI_COMMIT_BRANCH == null || $CI_COMMIT_BRANCH == "dev-template")
       when: never
     - if: $MATRIX_NAME == "kraken2"
       variables:
          NF_PROCESS_FILES: "subworkflows/kraken_pipeline.nf"
          NF_WORKFLOW_OPTS: "--fastq test_data/case01"
          NF_IGNORE_PROCESSES: "rebatchFastq,stopCondition"
     - if: $MATRIX_NAME == "batch"
       variables:
          NF_PROCESS_FILES: "subworkflows/kraken_pipeline.nf"
          NF_WORKFLOW_OPTS: "--fastq test_data/case01 --batch_size 1000 "
          NF_IGNORE_PROCESSES: "stopCondition"
     # In wf-metagenomics, the wf runs indefinitely if there is no condition to stop it.
     # With the read limit we can stop the wf if the limit is reached.
     # It creates a STOP.fastq.gz that will be a new input in the wf and make it stop.
     # Use the creation of this file to test if watch_path is able to detect new input files.
     - if: $MATRIX_NAME == "kraken2-watch-path"
       variables:
          NF_PROCESS_FILES: "subworkflows/kraken_pipeline.nf"
          NF_WORKFLOW_OPTS: "--fastq test_data/case01 --watch_path --read_limit 1000"
          NF_IGNORE_PROCESSES: "rebatchFastq"
     - if: $MATRIX_NAME == "minimap2"
       variables:
          NF_PROCESS_FILES: "subworkflows/minimap_pipeline.nf"
          NF_WORKFLOW_OPTS: "--fastq test_data/case01 --minimap2filter '9606,1404' --classifier minimap2"
          NF_IGNORE_PROCESSES: ""
     - if: $MATRIX_NAME == "minimap2-sample-sheet"
       variables:
          NF_PROCESS_FILES: "subworkflows/minimap_pipeline.nf"
          NF_WORKFLOW_OPTS: "--fastq test_data/case02 --minimap2filter '9606,1404' --classifier minimap2 --sample_sheet test_data/case02/sample_sheet.csv"
          NF_IGNORE_PROCESSES: ""
     # Add test with data from Bacteria, Archaea, Fungi (BAF) with are supposed to be included in the default database: ncbi_16s_18s.
     # It also works as a test for single file.
     - if: $MATRIX_NAME == "kraken2-baf"
       variables:
          NF_PROCESS_FILES: "subworkflows/kraken_pipeline.nf"
          NF_WORKFLOW_OPTS: "--fastq test_data/case03_baf/reads_baf.fastq.gz"
          NF_IGNORE_PROCESSES: "rebatchFastq,stopCondition"
     - if: $MATRIX_NAME == "minimap2-baf"
       variables:
          NF_PROCESS_FILES: "subworkflows/minimap_pipeline.nf"
          NF_WORKFLOW_OPTS: "--fastq test_data/case03_baf/reads_baf.fastq.gz --classifier minimap2"
          NF_IGNORE_PROCESSES: "extractMinimap2Reads"
