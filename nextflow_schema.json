{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/epi2me-labs/wf-metagenomics/master/nextflow_schema.json",
    "title": "epi2me-labs/wf-metagenomics",
    "description": "General purpose metagenomics workflow using kraken2 and/or minimap2",
    "url": "https://github.com/epi2me-labs/wf-clone-validation",
    "type": "object",
    "definitions": {
        "core_options": {
            "title": "Core options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "properties": {
                "fastq": {
                    "type": "string",
                    "format": "path",
                    "description": "A fastq file or directory containing fastq input files or directories of input files.",
                    "help_text": "If directories named \\\"barcode*\\\" are found under the `--fastq` directory the data is assumed to be multiplex and each barcode directory will be processed independently. If `.fastq(.gz)` files are found under the `--fastq` directory the sample is assumed to not be multiplexed. In this second case `--samples` should be a simple name rather than a CSV file."
                },
                "classifier": {
                    "type": "string",
                    "default": "kraken2",
                    "description": "Kraken2 or Minimap2 workflow to be used for classification of reads.",
                    "enum": [
                        "kraken2",
                        "minimap2"
                    ],
                    "help_text": "Use kraken2 for fast classification and minimap2 for more finer resolution, see read me for further info."
                },
                "max_len": {
                    "type": "integer",
                    "default": 2000,
                    "description": "Specify read length upper limit"
                },
                "min_len": {
                    "type": "integer",
                    "default": 200,
                    "description": "Specify read length lower limit"
                },
                "out_dir": {
                    "type": "string",
                    "format": "directory-path",
                    "default": "output",
                    "description": "Directory for output of all user-facing files."
                },
                "report_name": {
                    "type": "string",
                    "default": "report",
                    "description": "Optional report suffix"
                },
                "sample": {
                    "type": "string",
                    "description": "A sample name for non-multiplexed data. Permissible if passing a file or directory of .fastq(.gz)."
                },
                "sample_sheet": {
                    "type": "string",
                    "format": "file-path",
                    "description": "CSV file with columns named `barcode`, `sample_name` and `type`. Permissible if passing a directory containing barcodeXX sub-directories."
                },
                "store_dir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Where to store initial download of taxonomy database."
                },
                "source": {
                    "type": "string",
                    "default": "ncbi_16s_18s",
                    "description": "Sets the default reference, databases and taxonomy used. Choices: ['TARGLOCI']",
                    "enum": [
                        "ncbi_16s_18s",
                        "ncbi_16s_18s_28s_ITS",
                        "PlusPF-8"
                    ]
                },
                "sources": {
                    "type": "object",
                    "hidden": true,
                    "description": "A map containing the available sources and their default resource paths"
                },
                "taxonomy": {
                    "type": "string",
                    "format": "path",
                    "description": "Optionally override the taxonomy used [.tar.gz or Dir]"
                }
            },
            "required": [
                "fastq"
            ]
        },
        "minimap2_options": {
            "title": "Minimap2 options",
            "type": "object",
            "fa_icon": "fas fa-dna",
            "properties": {
                "reference": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Specifically override reference [.fna]"
                },
                "ref2taxid": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Specifically override ref2taxid mapping. Format is .tsv (refname  taxid), no header row."
                },
                "minimap2filter": {
                    "type": "string",
                    "description": "Filter output of minimap2 by taxids inc. child nodes, E.g. \"9606,1404\""
                },
                "minimap2exclude": {
                    "type": "boolean",
                    "description": "Invert minimap2filter and exclude the given taxids instead"
                },
                "split_prefix": {
                    "type": "boolean",
                    "description": "Enable if using a very large reference with minimap2"
                }
            },
            "description": "Minimap2 classification options",
            "help_text": "Minimap2\nThe default strategy is using minimap2 to perform full\nalignments against .fasta formatted references sequences. "
        },
        "kraken2_options": {
            "title": "Kraken2 options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "help_text": "Kraken2\nIt is possible to enable classification by kraken2, \nand disable alignment which is a faster but coarser method of \nclassification reliant on the presence of a kraken2 database.\n\nUsing kraken2 + minimap2\nIf both are enabled and --kraken2minimap is set, only reads \nclassified by kraken2 (and  optionally filtered by --kraken2filter) \nare passed to the alignment step.",
            "properties": {
                "database": {
                    "type": "string",
                    "format": "path",
                    "description": "Specifically override database [.tar.gz or Dir]"
                },
                "bracken_dist": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Specifically override bracken kmer dist file"
                },
                "bracken_length": {
                    "type": "integer",
                    "default": 1000,
                    "description": "Set the length value bracken will use"
                },
                "watch_path": {
                    "type": "boolean",
                    "description": "Specify if you want the workflow to continuously process input files as they become available in the input --fastq directories."
                },
                "read_limit": {
                    "type": "integer",
                    "description": "Use with watch_path if you don't want workflow to run indefinitely, will STOP pipeline when this number of reads have been processed.,"
                },
                "run_indefinitely": {
                    "type": "boolean",
                    "description": "When used with watch_path will watch indefinitely if set to true",
                    "default": true
                },
                "batch_size": {
                    "type": "integer",
                    "default": 1,
                    "description": "Number of fastq files to process in each batch"
                },
                "port": {
                    "type": "integer",
                    "description": "Port number for the kraken server to use",
                    "default": 8080
                },
                "bracken_level": {
                    "type": "string",
                    "default": "S",
                    "description": "Set the level that bracken will output at"
                }
            },
            "description": "Kraken2 classification options"
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "threads": {
                    "type": "integer",
                    "default": 8,
                    "description": "Set max number of threads to use. Note: limited by config executor cpus."
                },
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle"
                },
                "wfversion": {
                    "type": "string",
                    "description": "Workflow version.",
                    "default": "v2.0.3",
                    "hidden": true
                },
                "disable_ping": {
                    "type": "boolean",
                    "description": "Enable to prevent sending a workflow ping.",
                    "hidden": true
                },
                "aws_image_prefix": {
                    "type": "string",
                    "description": "aws image prefix.",
                    "hidden": true
                },
                "aws_queue": {
                    "type": "string",
                    "description": "aws queue.",
                    "hidden": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/core_options"
        },
        {
            "$ref": "#/definitions/minimap2_options"
        },
        {
            "$ref": "#/definitions/kraken2_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        }
    ],
    "docs": {
        "intro": "\n## Introduction\n\nwf-metagenomics offers two different approaches to assigning sequence reads to a species:\n\n### Kraken2 - Default\n\n[Kraken2](https://github.com/DerrickWood/kraken2) is used with the [Kraken2-server](https://github.com/epi2me-labs/kraken2-server) to offer the fastest method for classification of reads. [Bracken](https://github.com/jenniferlu717/Bracken) is then used to give a good estimate of species level abundance in the sample which can be visualised in the report. The Kraken2 workflow mode can be run in real time. See quickstart below for more details.\n\n### Minimap2 \n\n[Minimap2](https://github.com/lh3/minimap2) provides the finest resolution analysis but, depending on the reference database used, at the expense of significantly more compute time. Currently the minimap2 mode does not support real-time.\n\nThe wf-metagenomics workflow by default uses the NCBI 16S + 18S rRNA database that will be downloaded at the start of an analysis, there are expanded metagenomic database options available with the --source parameter but the workflow is not tied to this database and can also be used with custom databases as required.\n\n",
        "links": "## Useful links\n\n* [nextflow](https://www.nextflow.io/)\n* [docker](https://www.docker.com/products/docker-desktop)"
    }
}